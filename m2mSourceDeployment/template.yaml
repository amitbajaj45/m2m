AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: M2M Source Environment
Parameters:
  KeyName:
    Description: Name of the EC2 KeyPair to enable SSH access to the instances
    Type: 'String'
    Default: 'm2m.sourcekey'
  DBName:
    Description: Name of the database which will be username and password as well
    Type: 'String'
    Default: 'petstoredb'
  C9InstanceType:
    Description: The instance type of the new Amazon EC2 instance that AWS Cloud9
      will launch for the development environment (for example, 't2.micro').
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - m4.large
      - t2.nano
      - c4.large
      - t2.medium
      - t2.large
      - m4.xlarge
      - t2.xlarge
      - c4.xlarge
      - c4.2xlarge
      - m4.2xlarge
      - t2.2xlarge
      - c4.4xlarge
      - m4.4xlarge
      - c4.8xlarge
      - m4.10xlarge
      - m4.16xlarge
  C9StopTime:
    Description: The number of minutes until the running instance is shut down after
      the environment has last been used.
    Type: Number
    Default: 30
Mappings:
  RegionMap:
    us-east-1:
      "HVM64": "ami-0ac80df6eff0e70b5"
    us-west-1:
      "HVM64": "ami-0d705db840ec5f0c5"
    us-west-2:
      "HVM64": "ami-003634241a8fcdec0"
Resources:
  SourceEnvVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Environment
        Value: source
      - Key: Name
        Value: m2m.source
  SourceEnvSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SourceEnvVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Environment
        Value: source
      - Key: Name
        Value: m2m.source
  SourceEnvSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SourceEnvVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Environment
        Value: source
      - Key: Name
        Value: m2m.source
  petStoreSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SourceEnvSubnet
    Properties:
      GroupName: petStoreSG
      GroupDescription: Pet Store App SG
      VpcId: !Ref SourceEnvVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Environment
        Value: source
      - Key: Name
        Value: m2m.source
  petStoreIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - petStoreSG
    Properties:
      IpProtocol: tcp
      ToPort: 8080
      FromPort: 8080
      CidrIp: 0.0.0.0/0
      GroupId: !Ref petStoreSG
  petStoreIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - petStoreSG
    Properties:
      IpProtocol: tcp
      ToPort: 9990
      FromPort: 9990
      CidrIp: 0.0.0.0/0
      GroupId: !Ref petStoreSG
  petStoreDBSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SourceEnvSubnet
    Properties:
      GroupName: petStoreDBSG
      GroupDescription: Pet Store App DB SG
      VpcId: !Ref SourceEnvVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !GetAtt petStoreSG.GroupId
      Tags:
        - Key: Environment
          Value: source
        - Key: Name
          Value: mm2m.source-db
  petStoreDBIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - petStoreDBSG
    Properties:
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      GroupId: !Ref petStoreDBSG
      SourceSecurityGroupId: !GetAtt petStoreSG.GroupId
  m2mSourceGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Environment
        Value: source
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - SourceEnvVPC
    Properties:
      VpcId: !Ref SourceEnvVPC
      InternetGatewayId: !Ref m2mSourceGateway
  SourceEnvRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - SourceEnvVPC
      - SourceEnvSubnet
    Properties:
      VpcId: !Ref SourceEnvVPC
      Tags:
      - Key: Environment
        Value: source
  SourceEnvRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SourceEnvSubnet
      - SourceEnvRouteTable
    Properties:
      SubnetId: !Ref SourceEnvSubnet
      RouteTableId: !Ref SourceEnvRouteTable
  SourceEnvAllRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - SourceEnvRouteTable
    Properties:
      RouteTableId: !Ref SourceEnvRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:  !Ref m2mSourceGateway
  petStoreApp:
    Type: AWS::EC2::Instance
    DependsOn:
      - SSHKeyGeneratorExecution
      - petStoreDB
    Properties:
      InstanceType: "t2.small"
      SecurityGroupIds: [!Ref petStoreSG]
      SubnetId: !Ref SourceEnvSubnet
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      BlockDeviceMappings:
      -
        DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 16
      Monitoring: True
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install default-jdk -y
            sudo groupadd -r wildfly
            sudo useradd -r -g wildfly -d /opt/wildfly -s /sbin/nologin wildfly
            Version_Number=11.0.0.Final
            wget https://download.jboss.org/wildfly/$Version_Number/wildfly-$Version_Number.tar.gz -P /tmp
            sudo tar xf /tmp/wildfly-$Version_Number.tar.gz -C /opt/
            sudo ln -s /opt/wildfly-$Version_Number /opt/wildfly
            sudo chown -RH wildfly: /opt/wildfly
            sudo mkdir -p /etc/wildfly
            sudo cp /opt/wildfly/docs/contrib/scripts/systemd/wildfly.conf /etc/wildfly/
            sudo cp /opt/wildfly/docs/contrib/scripts/systemd/launch.sh /opt/wildfly/bin/
            sudo sh -c 'chmod +x /opt/wildfly/bin/*.sh'
            sudo cp /opt/wildfly/docs/contrib/scripts/systemd/wildfly.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl start wildfly
            sudo systemctl enable wildfly
            sudo ufw allow 8080/tcp
            sudo /opt/wildfly/bin/add-user.sh  -u 'admin-user10' -p 'password10'
            sudo su -c 'echo -e "\n# The address console to bind to\nWILDFLY_CONSOLE_BIND=0.0.0.0" >> /etc/wildfly/wildfly.conf'
            sudo sed -i 's/\-c \$2 \-b \$3/\-c \$2 \-b \$3 \-bmanagement \$4/' /opt/wildfly/bin/launch.sh
            sudo systemctl restart wildfly
            sudo sed -i 's/\$WILDFLY_BIND/\$WILDFLY_BIND \$WILDFLY_CONSOLE_BIND/' /etc/systemd/system/wildfly.service
            sudo systemctl daemon-reload
            sudo systemctl restart wildfly
            sudo wget https://m2m-sourceapp-artifacts.s3-us-west-2.amazonaws.com/applicationPetstore.war -P /opt/wildfly/standalone/deployments/
            sudo mkdir -p /opt/wildfly/modules/system/layers/base/org/postgresql/main
            sudo wget https://m2m-sourceapp-artifacts.s3-us-west-2.amazonaws.com/postgresql/module.xml -P /opt/wildfly/modules/system/layers/base/org/postgresql/main
            sudo wget https://m2m-sourceapp-artifacts.s3-us-west-2.amazonaws.com/postgresql/postgresql-42.2.1.jre7.jar -P /opt/wildfly/modules/system/layers/base/org/postgresql/main
            sleep 20
            cd /opt/wildfly/bin/
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command="/subsystem=datasources/jdbc-driver=postgresql:add(driver-name=postgresql,driver-module-name=org.postgresql, driver-class-name=org.postgresql.Driver)"
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command="data-source remove --name=ExampleDS"
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command=":reload"
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command="data-source add \
            --name=ExampleDS \
            --driver-name=postgresql \
            --connection-url=jdbc:postgresql://${petStoreDB.PublicDnsName}:5432/${DBName} \
            --jndi-name=java:jboss/datasources/ExampleDS \
            --user-name=${DBName} \
            --password=${DBName} \
            --use-ccm=false \
            --max-pool-size=25 \
            --blocking-timeout-wait-millis=5000 \
            --new-connection-sql=\"set datestyle = ISO, European;\""
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command="data-source enable --name=ExampleDS"
            ./jboss-cli.sh --connect --user="admin-user10" --password="password10" --command=":reload"
            sudo systemctl restart wildfly
      Tags:
        - Key: Environment
          Value: source
        - Key: Name
          Value: m2m.source-app
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  petStoreDB:
    Type: AWS::EC2::Instance
    DependsOn:
      - SSHKeyGeneratorExecution
    Properties:
      InstanceType: "t2.small"
      SecurityGroupIds: [!Ref petStoreDBSG]
      SubnetId: !Ref SourceEnvSubnet
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 16
      Monitoring: True
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install postgresql postgresql-contrib -y
            sleep 10
            sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" /etc/postgresql/10/main/postgresql.conf
            sudo su -c 'echo -e "\nhost\tall\t\tall\t\t0.0.0.0/0\t\tmd5" >> /etc/postgresql/10/main/pg_hba.conf'
            sudo groupadd -r ${DBName}
            sudo useradd -r -g ${DBName} -d /opt/${DBName} -s /sbin/nologin ${DBName}
            sudo -u postgres psql -c "CREATE DATABASE ${DBName};"
            sudo -u postgres psql -c "Create user ${DBName} with encrypted password '${DBName}';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${DBName} TO ${DBName};"
            sudo systemctl restart postgresql
      Tags:
        - Key: Environment
          Value: source
        - Key: Name
          Value: m2m.source-db
  # SSH key generation
  SSHKeyGenerator:
    Type: 'AWS::Serverless::Function'
    Properties:
      Timeout: 60
      Runtime: python3.8
      Handler: generate_ssh_key.lambda_handler
      Role:
        'Fn::GetAtt':
          - SSHKeyGeneratorRole
          - Arn
      CodeUri: ./src/create_key_pair
  SSHKeyGeneratorExecution:
    Type: 'Custom::SSHKeyGenerator'
    DependsOn:
      - SSHKeyGenerator
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - SSHKeyGenerator
          - Arn
  SSHKeyGeneratorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ssm:*'
                  - 'ec2:*'
                Resource: '*'

  # Enabling SSM on instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole
  SSMPetStoreAppManagementURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.ManagementURL
      Type: String
      Value: !Sub 'http://${petStoreApp.PublicDnsName}:9990/console'
  SSMPetStoreAppManagementUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.ManagementUser
      Type: String
      Value: 'admin-user10'
  SSMPetStoreAppManagementPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.ManagementPassword
      Type: String
      Value: 'password10'
  SSMPetStoreAppDBName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.DBName
      Type: String
      Value: !Ref DBName
  SSMPetStoreAppDBUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.DBUser
      Type: String
      Value: !Ref DBName
  SSMPetStoreAppDBPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: m2m.source.DBPassword
      Type: String
      Value: !Ref DBName
  # Cloud9 Instance
  C9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name:
        Ref: AWS::StackName
      Description: Cloud-based IDE for AWS M2M Workshop
      AutomaticStopTimeMinutes:
        Ref: C9StopTime
      InstanceType:
        Ref: C9InstanceType
      SubnetId:
        Ref: SourceEnvSubnet
Outputs:
  petStoreAppDNSName:
    Description: The pet store App DNS Name
    Value: !GetAtt petStoreApp.PublicDnsName
  petStoreDBDNSName:
    Description: The pet store DB DNS Name
    Value: !GetAtt petStoreDB.PublicDnsName
  petStoreURL:
    Description: The pet store URL
    Value: !Sub 'http://${petStoreApp.PublicDnsName}:8080/applicationPetstore'
  petStoreAppManagementURL:
    Description: The pet store URL
    Value: !Sub 'http://${petStoreApp.PublicDnsName}:9990/console'
  C9Instance:
    Description: Cloud9 Instance Name
    Value:
      Ref: C9Instance