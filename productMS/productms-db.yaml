AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys Product micro service as ECS task in AWS Fargate.

Parameters:
  Stage:
    Type: String
    Default: DEV
    Description: The stage into we deploy this template.

  DBNAME:
    Type: String
    Default: productms
    Description: The name of Product MicroService DB
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances to access the Internet.
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
Resources:
  ProductDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the WebSphere MQ instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
  ProductDBTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  productMSDBECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: product-ms-db-cluster

  productMSDBECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: product-ms-db-task
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref DBTaskExecutionRole
      ContainerDefinitions:
        - Name: product-ms-db
          Cpu: 2048
          Memory: 4096
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/m2m/productmsdb-ubuntu-image:latest'
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_DB
              Value: productms
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: product-ms-db-task
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: cmr/ecs/product-ms-db-cluster
      RetentionInDays: 30

  productMSDBECSService:
    Type: AWS::ECS::Service
    DependsOn: ProductDBListener
    Properties:
      ServiceName: product-ms-db
      Cluster: !Ref productMSDBECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ProductDBSecurityGroup
          Subnets: !Ref 'SubnetId'
      TaskDefinition: !Ref productMSDBECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn:
            Ref: ProductDBTG
          ContainerPort: 5432
          ContainerName: product-ms-db
#  EcsSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: ECS Security Group
#      VpcId: !Ref VPC
#  EcsSecurityGroupHTTPinbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '5432'
#      ToPort: '5432'
#      CidrIp: 0.0.0.0/0
  ProductDBALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ProductDBALB
      Scheme: internet-facing
      Type: network
      Subnets: !Ref 'SubnetId'
  ProductDBServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
                         'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
                         'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
                Resource: '*'
  ProductDBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ProductDBServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ProductDBTG'
      LoadBalancerArn: !Ref 'ProductDBALB'
      Port: '5432'
      Protocol: TCP
#  DBProductDBListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    DependsOn: ProductDBListener
#    Properties:
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref 'ProductDBTG'
#      ListenerArn: !Ref 'ProductDBListener'
#      Priority: 1
  ProductDBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ProductDBALB
    Properties:
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 7
      UnhealthyThresholdCount: 7
      Name: ProductDBTG
      Port: 5432
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: ip
##################################################
  ProductAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the product Micro service App
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ProductAppSecurityIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - ProductAppSecurityGroup
    Properties:
      IpProtocol: tcp
      ToPort: 8080
      FromPort: 8080
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ProductAppSecurityGroup
  ProductAppTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  productMSAppECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: product-ms-app-cluster

  productMSAppECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ProductDBALB
    Properties:
      Family: product-ms-app-task
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ProductAppTaskExecutionRole
      ContainerDefinitions:
        - Name: product-ms-app
          Cpu: 2048
          Memory: 4096
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/m2m/productmsapp-image:latest'
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: DB_URL
              Value: !Sub 'jdbc:postgresql://${ProductDBALB.DNSName}:5432/${DBNAME}?ApplicationName=productMicroService'
            - Name: DB_HOST
              Value: !Join ['', [!GetAtt [ProductDBALB, DNSName]]]
            - Name: DB_PORT
              Value: 5432
            - Name: DB_NAME
              Value: !Ref DBNAME
            - Name: DB_USER
              Value: admin
            - Name: DB_PASS
              Value: passwOrd
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: product-ms-app-task
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: cmr/ecs/product-ms-app-cluster
      RetentionInDays: 30

  productMSAppECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ProductAppListener
      - productMSDBECSService
    Properties:
      ServiceName: product-ms-app
      Cluster: !Ref productMSAppECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ProductAppSecurityGroup
          Subnets: !Ref 'SubnetId'
      TaskDefinition: !Ref productMSAppECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn:
            Ref: ProductAppTG
          ContainerPort: 8080
          ContainerName: product-ms-app
#  EcsSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: ECS Security Group
#      VpcId: !Ref VPC
#  EcsSecurityGroupHTTPinbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '5432'
#      ToPort: '5432'
#      CidrIp: 0.0.0.0/0
  ProductAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ProductAppALB
      Scheme: internet-facing
      Type: application
      Subnets: !Ref 'SubnetId'
      SecurityGroups:
        - !Ref ProductAppSecurityGroup
  ProductAppServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
                         'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
                         'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
                Resource: '*'
  ProductAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ProductAppServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ProductAppTG'
      LoadBalancerArn: !Ref 'ProductAppALB'
      Port: '8080'
      Protocol: HTTP
#  DBProductDBListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    DependsOn: ProductDBListener
#    Properties:
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref 'ProductDBTG'
#      ListenerArn: !Ref 'ProductDBListener'
#      Priority: 1
  ProductAppTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ProductAppALB
    Properties:
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      Name: ProductAppTG
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetType: ip



Outputs:
  ProductAppLB:
    Description: Your product Micro Service DNS URL
    Value: !Join ['', [!GetAtt [ProductAppALB, DNSName]]]
